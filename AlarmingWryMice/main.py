import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7513338167:AAGtuPE90F5XnSfvdRkeME0lLbFBn7nET9M"  # üîπ –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏!)
ADMINS = {1302073426}  # üîπ –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤
PASSWORD = "bebeshka"  # üîπ –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞
authorized_admins = set()  # üîπ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—ã

bot = Bot(token=TOKEN)
dp = Dispatcher()

# üìÑ –õ–æ–≥–∏
LOG_FILE = "bot_logs.txt"

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler(),
    ]
)
logger = logging.getLogger(__name__)

# üìå –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–ª—è
class AuthState(StatesGroup):
    waiting_for_password = State()

async def send_log(message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏ –≤ Telegram –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    logging.info(message)
    for admin in authorized_admins:
        try:
            await bot.send_message(admin, f"üìù –õ–æ–≥: {message}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞: {e}")

@dp.message(Command("login"))
async def login(message: types.Message, state: FSMContext):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if message.from_user.id in authorized_admins:
        await message.answer("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
    else:
        await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        await state.set_state(AuthState.waiting_for_password)

@dp.message(AuthState.waiting_for_password)
async def check_password(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫."""
    if message.text == PASSWORD and message.from_user.id in ADMINS:
        authorized_admins.add(message.from_user.id)
        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏.")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
    await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è

@dp.message(Command("logout"))
async def logout(message: types.Message):
    """–í—ã—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if message.from_user.id in authorized_admins:
        authorized_admins.remove(message.from_user.id)
        await message.answer("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
    else:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")

@dp.message(Command("logs"))
async def send_logs(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∞–¥–º–∏–Ω–∞–º."""
    if message.from_user.id in authorized_admins:
        try:
            file = FSInputFile(LOG_FILE)
            await message.answer_document(file)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤: {e}")
    else:
        await message.answer("‚ùå –í–∞–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login.")

@dp.message(Command("clear_logs"))
async def clear_logs(message: types.Message):
    """–û—á–∏—â–∞–µ—Ç –ª–æ–≥–∏."""
    if message.from_user.id in authorized_admins:
        try:
            with open(LOG_FILE, "w") as file:
                file.write("")
            await message.answer("üóë –õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {e}")
    else:
        await message.answer("‚ùå –í–∞–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login.")

@dp.message(Command("status"))
async def check_status(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
    if message.from_user.id in authorized_admins:
        await message.answer("‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
    else:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login.")

@dp.message()
async def handle_message(message: types.Message):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥."""
    if message.text.startswith("/"):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    log_message = f"üì© {message.from_user.id} ({message.from_user.username}): {message.text}"
    logger.info(log_message)
    await send_log(log_message)

async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
